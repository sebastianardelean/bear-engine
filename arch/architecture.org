#+STARTUP: inlineimages

* Bear Engine Architecture

** Public APIs

The APIs for the Bear engine are represented by data types defined in ~engine_types.h~
and public functions defined in the namespace ~bear~.

*** ~bear~ namespace

#+begin_src plantuml :file images/bear_namespace.png
  package "bear" {
          [HndlEngineCreateWindow]
          [HndlEngineRun]
          [HndlEngineChangeLighting]
          [HndlEngineDraw]
          [HndlEngineGetKeyState]
  }
#+end_src

#+RESULTS:
[[file:images/bear_namespace.png]]

*** ~engine_types.h~

#+begin_src plantuml :file images/apis.png
  @startuml
  class color_t {
          + a: uint8_t
          + b: uint8_t
          + g: uint8_t
          + r: uint8_t
  }

  enum fill_type_t {
          + FILL_COLOR
          + FILL_TEXTURE
  }

  enum texture_filter_type_t {
          + FILTER_NEAREST_TYPE
          + FILTER_LINEAR_TYPE
          + FILTER_MIPMAP_TYPE
  }

  class fill_option_t {
          + fill_type : fill_type_t
          + filter_type: texture_filter_type_t
          + color: color_t
          + sTextureFile: const wchar_t *
  }

  class coordinate_t {
          + x : float
          + y : float
          + z : float
  }

  class pixel_t {
          + color :color_t
          + rgb : uint32_t
          note: This shall be implemented as a union datatype
  }

  class sprite_t {
          + width: int32_t
          + height: int32_t
          + pixels: pixel_t *
  }
  @enduml
#+end_src

#+RESULTS:
[[file:images/apis.png]]



** Draw shapes

#+begin_src plantuml :file images/shapes.png
  @startuml
  class Shape {
          + Shape(coordinates:std::vector<coordinate_t>, fill_option:fill_option_t)
          + Draw():void
          + EnableLighting(normal:coordinate_t)
          # g_svCoordinates : std::vector<coordinate_t>
          # g_sFill_option: fill_option_t
          # g_bIsLightingEnabled : bool
          # g_sNormal: coordinate_t
  }

  class Line {
          + Line(p1:coordinate_t, p2:coordinate_t, color: color_t)
          + Line(p:std::vector<coordinate_t>, color:color_t)

  }

  class Point {
          + Point(p: coordinate_t, color:color_t)

  }

  class Triangle {
          + Triangle(p1:coordinate_t, p2:coordinate_t, p3:coordinate_t, fill_option:fill_option_t)
          + Triangle(p:std::vector<coordinate_t>, fill_option:fill_option_t)

  }

  class Quad {
          + Quad(p1:coordinate_t, p2:coordinate_t, p3:coordinate_t, p4:coordinate_t, fill_option:fill_option_t)
          + Quad(p: std::vector<coordinate_t> fill_option:fill_option_t)

  }

  Shape <|-- Line
  Shape <|-- Point
  Shape <|-- Triangle
  Shape <|-- Quad
  @enduml
#+end_src

#+RESULTS:
[[file:images/shapes.png]]


** Engine Design

*** Engine core

The core will be responsible with the following:

1. Window creation and destruction
2. OpenGL initialization
3. Handle of Window Events (close, key pressed, resize)
4. Handle of key states
5. Engine main loop

**** Microsoft Windows solution

#+begin_src plantuml :file images/engine_core.png
  @startuml
  class engine_core {
          - {static} g_hWnd:HWND
          - {static} g_bFullScreen:BOOL
          - {static} g_hDC:HDC
          - {static} g_hRC:HGLRC
          - {static} g_ptrGdiplusToken:ULONG_PTR
          - {static} g_baKeys[256]:BOOL
          - {static} g_hInstance: HINSTANCE
          - {static} g_faAmbientLight:std::array<float,3>
          - {static} g_faDiffuseLight:std::array<float,3>
          - {static} g_sLightPosition:coordinate_t
          - {static} InitGL(GLvoid):GLvoid
          - {static} ResizeGLScene(width:GLsizei, height:GLsizei):GLvoid
          - {static} CALLBACK WndProc(hWnd:HWND, uMsg:UINT, wParam:WPARAM, lParam:LPARAM):LRESULT
          + EngineCreateWindow(cTitle:const std::wstring &, iWinWidth:const INT, iWinHeight:const INT, bFullScreen:const BOOL):INT
          + EngineDestoryWindow():void
          + EngineDrawScene():void
          + EngineGetKeyState(bKeyCode:const BYTE):BOOL
  }
  @enduml
#+end_src

#+RESULTS:
[[file:images/engine_core.png]]

**** Engine start

#+begin_src plantuml :file images/engine_core_start.png
  @startuml
  start
  :EngineCreateWindow;
  :Initialize Gdiplus;
  if (Gdiplus failed?) then (yes)
          :return error;
          stop
  else (no)
  endif
  : Create window;
  if (failed?) then (yes)
          :return error;
          stop
  else (no)
  endif
  : Show window;
  : Set window foreground;
  : Set focus;
  : Resize GL Scene;
  : Init GL;
  stop
  @enduml
#+end_src

#+RESULTS:
[[file:images/engine_core_start.png]]

**** Engine Main Loop

#+begin_src plantuml :file images/engine_core_run.png
  @startuml
  start
  :Engine run;
  :Engine draw scene;
  while (check done flag) is (not done)
          if (Peek Message?) then (yes)
                  if (quit?) then (yes)
                          :done is set to true;
                  else (continue);
                          :Translate message;
                          :Dispatch message;
                  endif
          else (no)
                  if (FctDraw defined?) then (yes)
                          : Call engineDrawScene;
                  else (no)
                          :continue;
                  endif
          endif

  endwhile (done)
  :EngineDestoryWindow;
  stop
  @enduml
#+end_src


#+RESULTS:
[[file:images/engine_core_run.png]]



          
